1:实现线程有几种方式
这歌问题在面试也经常被问到,网上也有很多答案,有的说1种,2种,4种的都有,那么到底是几种呢?其实我们只要打开Thread类源码 看看它的注释就能找到答案
//在这就可以看到有说是二种方式创建线程 一种是继承Thread 实现run方法  第二种是实现Runnable接口的方式
There are two ways to create a new thread of execution.
One is to
 * declare a class to be a subclass of <code>Thread</code>. This
 * subclass should override the <code>run</code> method of class
 * <code>Thread</code>. An instance of the subclass can then be
 * allocated and started. For example, a thread that computes primes
 * larger than a stated value could be written as follows:

  The other way to create a thread is to declare a class that
  * implements the <code>Runnable</code> interface. That class then
  * implements the <code>run</code> method. An instance of the class can
  * then be allocated, passed as an argument when creating
  * <code>Thread</code>, and started. The same example in this other
  * style looks like the following:

  那么相比实现Runnable和继承Thread创建线程哪一个更好呢?
  1:如果继承Thread类,那么就不能继承其他的类,因为java是单继承,因此限制了它的扩展性
  2:如果继承Thread类,那么每次创建线程都要new一个Thread,导致线程的开启和销毁会开销比较大,因为开启线程其实是操作系统层面的,而且继承Thread类,其实每次执行的任务也就是run方法执行的代码
  这会导致线程间通信很难,而且不好复用,如果是使用实现Runnable,就可以使用线程池,这样就可以达到Runnalbe复用的效果,大大提高了效率,而且创建多个线程,执行的任务是同一段代码
  3:继承Thread,run()方法被覆盖 实现Runnable接口,run()方法target.run()


  2:如何正确停止线程
  原理介绍:使用interrupt来通知,  而不是强制
  我们只是告诉该线程可以中断了,至于是否中断,由当前线程决定,外界是不能强制让它中断的
  线程中断的场景:用户取消,超时等操作

 通常线程在什么情况下会停止
 第一:在它运行任务结束后
 第二:出现异常情况


当在run()方法中调用了sleep()方法时, 如果这个线程被中断,在外面调用了thread.interrupt();那么因为调用了sleep方法,中断标记会被清空,  我们在sleep()方法的源码注释中找到答案
if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown

     就是上面注释写的很清楚了


3:线程的生命周期
a:New 这是创建了线程 但是还没调用start方法
b:Runnable:这是调用了start()方法后就变成了Runnable状态,在这Runnable是指可运行的,而不是指运行中的
c:Blocked:当这个方法synchronized修饰的时候, 表示这个线程已经锁住了,其他线程进来就拿不到这锁,就会处于等待状态
d:Waiting
e:Timed Waiting
f:Terminated

在Thread类有一个枚举:
public enum State {
        /**
         * Thread state for a thread which has not yet started.
         */
        NEW,

        /**
         * Thread state for a runnable thread.  A thread in the runnable
         * state is executing in the Java virtual machine but it may
         * be waiting for other resources from the operating system
         * such as processor.
         */
        RUNNABLE,

        /**
         * Thread state for a thread blocked waiting for a monitor lock.
         * A thread in the blocked state is waiting for a monitor lock
         * to enter a synchronized block/method or
         * reenter a synchronized block/method after calling
         * {@link Object#wait() Object.wait}.
         */
        BLOCKED,

        /**
         * Thread state for a waiting thread.
         * A thread is in the waiting state due to calling one of the
         * following methods:
         * <ul>
         *   <li>{@link Object#wait() Object.wait} with no timeout</li>
         *   <li>{@link #join() Thread.join} with no timeout</li>
         *   <li>{@link LockSupport#park() LockSupport.park}</li>
         * </ul>
         *
         * <p>A thread in the waiting state is waiting for another thread to
         * perform a particular action.
         *
         * For example, a thread that has called <tt>Object.wait()</tt>
         * on an object is waiting for another thread to call
         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on
         * that object. A thread that has called <tt>Thread.join()</tt>
         * is waiting for a specified thread to terminate.
         */
        WAITING,

        /**
         * Thread state for a waiting thread with a specified waiting time.
         * A thread is in the timed waiting state due to calling one of
         * the following methods with a specified positive waiting time:
         * <ul>
         *   <li>{@link #sleep Thread.sleep}</li>
         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>
         *   <li>{@link #join(long) Thread.join} with timeout</li>
         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>
         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>
         * </ul>
         */
        TIMED_WAITING,

        /**
         * Thread state for a terminated thread.
         * The thread has completed execution.
         */
        TERMINATED;
    }
    上面就是定义线程的6个生命周期方法



    4:wait,notify,notifyAll三个方法
    用法,作用:粗塞阶段,唤醒阶段,遇到中断


    5:面试题:为什么wait要放在同步代码块中,而sleep则不用
    答:

    6:为什么在一个非同步方法中调用wait报错,比如
    public  void test(){
            for(int i=0;i<30;i++){
                System.out.println("i="+i);
                try {
                    wait(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
//报错日记
Exception in thread "main" java.lang.IllegalMonitorStateException
	at java.lang.Object.wait(Native Method)
	at threadcoreknowledge.objectcommonmethods.WaitNotifyPrintOddEveWait.test(WaitNotifyPrintOddEveWait.java:19)
	at threadcoreknowledge.objectcommonmethods.WaitNotifyPrintOddEveWait.main(WaitNotifyPrintOddEveWait.java:11)

	解决的问题很简单,只要是同步方法或者同步代码块就行

	那为什么会报错呢?
	进入到wait()方法源码中,
	public final native void wait(long timeout) throws InterruptedException;
	方法它是一个native层,那就超过了我的能力范围了,但是它的注释给我们讲的很清楚

    看他们的注释中有这个
    The current thread must own this object's monitor
    翻译就是:
    当前线程必须拥有该对象的监视器
    那么是wait方法必现有对象的监视器,所以必现放在同步中去执行wait方法,所以说解决上面的额问题很简单,


    正确回答:
    如果不把wait()方法放到同步代码块中的话,执行wait之前(还没有执行wait方法),线程突然切过去了,切过去的线程刚好执行了notify或者notifyAll()方法
    如果把代码都执行完毕再执行notify,这个时候再切换线程,去执行wait,就会导致线程一直处于粗塞状态,没有线程去唤醒它,从而导致永久等待或者死锁的发生,
    java设计者考虑到这种问题,所以就把wait方法放到同步中去调用,线程间需要配合或者传递数据的方式都放到同步代码块中去做了

    sleep()方法是针对自己单独线程的,不会设计到线程间的通信,和其他线程关系不大



    6:为什么线程通信的方法wait(),notify(),notifyAll()方法被定义在Object类中,而sleep()方法定义在Thread类中
      答案:
      因为wait(),notify(),notifyAll()这三个方法是锁级别的操作,而锁可以是任意对象的,而锁是绑定在某个对象中,而不是线程中,加入把wait(),notify(),notifyAll()
      放到Thread类中,这样就会造成很大的局限性,因为一个线程可以持有多把锁,但是如果把wait等三个方法放到Thread中的话,就不能一个线程持有多把锁的情况


      7:wait方法属于Object对象的,那么调用Thread.wait会怎么样呢?
      答案:
      因为Thread类比较特殊,因为线程在退出的时候会自动的去执行notify,



      8:如何选择是使用notify还是notifyAll？
      答案:
      唤醒多个线程和一个线程的区别

      9:notifyAll之后所有的线程都会再次抢夺锁，如果某线程抢夺失败怎么办？
      答案:
      没抢到锁的线程处于等待状态，等待锁的释放

      10:用suspend和resume来阻塞线程可以吗？为什么
      答案:
      这两个方法被弃用了，推荐使用wait、notify

      11:Thread类和Object类重要方法讲解
      sleep():我只想让线程在指定的时间内运行,其他时间不要占用cpu资源,而且不释放锁,主要体现在二个方面
      不释放synchronized和lock 锁,可以使用2个线程去证明, sleep方法不释放锁,


      12:sleep方法响应中断
      答案:sleep方法可以让线程进入wait状态,并发不占用cpu资源,但是不释放锁,直到规定时间后才执行,休眠时间如果被中断,会跑出异常并且清空中断标记



      13:wait和sleep方法的异同
      相同点:
      都会粗塞 响应中断
      不同点:
       wait只能放在同步中,而sleep就不需要强制要求
       wait后释放锁,sleep不会释放锁
       wait属于Object类,sleep属于Thread类
       sleep必现要传递时间,而wait则不需要

       14:join
       作用:因为新的线程加入了我们,所以我们要等待它执行完后再执行
       用法:main线程等待thread1线程执行完毕,注意谁等谁


       15:线程安全
        多个线程访问某个对象以及对象方法或者属性的时候,结果和我预想的一样,这就是线程安全简单的定义

       16:什么是JMM
       JMM是Java Memory Model的缩写


       17:为什么需要JMM
       因为我们写的java代码最终是要变成机器指令,然后交给cpu去执行的,而cpu各大厂商也不同,导致不同的cpu(处理器)结果不同,无法保证并发安全
       这个时候就需要一套标准,让多线程的运行结果可预期

       JMM是一组规范,需要各个JVM的实现来遵守JM规范,以便开发者可以利用这些规范,更方便的开发多线程程序


       18:JMM三大特性
       a:原子性
       b:可见性
       c:重排序



      19:什么是重排序
      在线程1内部二行的代码的实际执行顺序和代码在java文件中的顺序不一致,代码指令并不是严格按照代码语句顺序执行的,



      20:yield方法
      作用:释放我的cpu时间片 不会释放锁,不会阻塞,线程还是处于Runnable状态

      21:a++场景下多个线程进行操作结果错误分析
      线程1          线程2
      i=1            i=1
      i+1            i+1
      i=2            i=2
      如果线程1去执行了i+1也就是i++的操作,那么这个时候切换到线程2 线程最后赋值i=2还没执行的话,那么这个时候i还是等于1的
      去执行了线程2, 线程2也执行了i+1那么这个也是等于2,然后又切换到线程1i=2,线程2也切换过来也执行i=2这条语句的话,最后i最后的结果是2
      产生这个问题的原因是a++这个操作不是原子性,其实是分三个步骤
      解决方案是:使用同步的方法或者同步代码块也行,或者使用AtomicInteger类,因为这个类在内部实现了a++三个步骤,



      22:死锁的产生条件
      23:学习方法,自顶向下,先列出使用场景,然后再去使用,最后去看其内部实现原理


      24
      JVM内存结构:和java 虚拟机运行时区域有关
      java内存模型(JMM):和java并发编程有关
      java对象模型:和java对象在虚拟机中的表现形式有关

      25:为什么需要JMM
        c语言不存在内存模型的概念
        依赖处理器(cpu), 不同的处理器处理结果不同
        无法保证并发安全
        根据上面的介绍,就需要一个标准,让多线程运行的结果可预期


      26:
      interrupted() 判断是否中断,然后会把线程的中断状态设置为false
      源码:
      public static boolean interrupted() {
              return currentThread().isInterrupted(true);
          }
          调用了isInterrupted()有参方法
           private native boolean isInterrupted(boolean ClearInterrupted);
           ClearInterrupted表示是否需要清除


      interrupt():判断线程是否中断
        Thread.interrupted()的目标对象是什么？



        27:一般情况而言,把blocked(阻塞),waiting(等待),Timed_Waiting(计时等待)都称之为阻塞状态



        28:wait,notify,notifyAll详解
        作用,用法:阻塞阶段,唤醒阶段,遇到中断

        29:sleep()
        作用:我只想让线程在预期的时间内执行,其他时候不要占用CPU资源,sleep()后进入粗塞状态,直到他休眠时间到了以后,重新获取CPU资源,让cpu进行调度
        sleep方法可以让线程进入到waiting状态,并且不占用CPU资源,但是不释放锁,直到规定时间后再执行,休眠期间如果被打断的话,会抛出异常并清除中断状态或者叫标记


       































