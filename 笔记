1:实现线程有几种方式
这歌问题在面试也经常被问到,网上也有很多答案,有的说1种,2种,4种的都有,那么到底是几种呢?其实我们只要打开Thread类源码 看看它的注释就能找到答案
//在这就可以看到有说是二种方式创建线程 一种是继承Thread 实现run方法  第二种是实现Runnable接口的方式
There are two ways to create a new thread of execution.
One is to
 * declare a class to be a subclass of <code>Thread</code>. This
 * subclass should override the <code>run</code> method of class
 * <code>Thread</code>. An instance of the subclass can then be
 * allocated and started. For example, a thread that computes primes
 * larger than a stated value could be written as follows:

  The other way to create a thread is to declare a class that
  * implements the <code>Runnable</code> interface. That class then
  * implements the <code>run</code> method. An instance of the class can
  * then be allocated, passed as an argument when creating
  * <code>Thread</code>, and started. The same example in this other
  * style looks like the following:

  那么相比实现Runnable和继承Thread创建线程哪一个更好呢?
  1:如果继承Thread类,那么就不能继承其他的类,因为java是单继承,因此限制了它的扩展性
  2:如果继承Thread类,那么每次创建线程都要new一个Thread,导致线程的开启和销毁会开销比较大,因为开启线程其实是操作系统层面的,而且继承Thread类,其实每次执行的任务也就是run方法执行的代码
  这会导致线程间通信很难,而且不好复用,如果是使用实现Runnable,就可以使用线程池,这样就可以达到Runnalbe复用的效果,大大提高了效率,而且创建多个线程,执行的任务是同一段代码
  3:继承Thread,run()方法被覆盖 实现Runnable接口,run()方法target.run()


  2:如何正确停止线程
  原理介绍:使用interrupt来通知,  而不是强制
  我们只是告诉该线程可以中断了,至于是否中断,由当前线程决定,外界是不能强制让它中断的
  线程中断的场景:用户取消,超时等操作

 通常线程在什么情况下会停止
 第一:在它运行任务结束后
 第二:出现异常情况


当在run()方法中调用了sleep()方法时, 如果这个线程被中断,在外面调用了thread.interrupt();那么因为调用了sleep方法,中断标记会被清空,  我们在sleep()方法的源码注释中找到答案
if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown

     就是上面注释写的很清楚了


3:线程的生命周期
a:New 这是创建了线程 但是还没调用start方法
b:Runnable:这是调用了start()方法后就变成了Runnable状态,在这Runnable是指可运行的,而不是指运行中的
c:Blocked:当这个方法synchronized修饰的时候, 表示这个线程已经锁住了,其他线程进来就拿不到这锁,就会处于等待状态
d:Waiting
e:Timed Waiting
f:Terminated

在Thread类有一个枚举:
public enum State {
        /**
         * Thread state for a thread which has not yet started.
         */
        NEW,

        /**
         * Thread state for a runnable thread.  A thread in the runnable
         * state is executing in the Java virtual machine but it may
         * be waiting for other resources from the operating system
         * such as processor.
         */
        RUNNABLE,

        /**
         * Thread state for a thread blocked waiting for a monitor lock.
         * A thread in the blocked state is waiting for a monitor lock
         * to enter a synchronized block/method or
         * reenter a synchronized block/method after calling
         * {@link Object#wait() Object.wait}.
         */
        BLOCKED,

        /**
         * Thread state for a waiting thread.
         * A thread is in the waiting state due to calling one of the
         * following methods:
         * <ul>
         *   <li>{@link Object#wait() Object.wait} with no timeout</li>
         *   <li>{@link #join() Thread.join} with no timeout</li>
         *   <li>{@link LockSupport#park() LockSupport.park}</li>
         * </ul>
         *
         * <p>A thread in the waiting state is waiting for another thread to
         * perform a particular action.
         *
         * For example, a thread that has called <tt>Object.wait()</tt>
         * on an object is waiting for another thread to call
         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on
         * that object. A thread that has called <tt>Thread.join()</tt>
         * is waiting for a specified thread to terminate.
         */
        WAITING,

        /**
         * Thread state for a waiting thread with a specified waiting time.
         * A thread is in the timed waiting state due to calling one of
         * the following methods with a specified positive waiting time:
         * <ul>
         *   <li>{@link #sleep Thread.sleep}</li>
         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>
         *   <li>{@link #join(long) Thread.join} with timeout</li>
         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>
         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>
         * </ul>
         */
        TIMED_WAITING,

        /**
         * Thread state for a terminated thread.
         * The thread has completed execution.
         */
        TERMINATED;
    }
    上面就是定义线程的6个生命周期方法



    4:wait,notify,notifyAll三个方法
    用法,作用:粗塞阶段,唤醒阶段,遇到中断




